users,
topic,
questions/question,


//AI Generation

/*
// AI Question Generation
const generateQuestions = async (topicDescription, topicId, username) => {
  try {
    // Use the OpenAI API to generate the question
    const chatCompletion = await openai.chat.completions.create({
      messages: [
        {
          role: "system",
          content: `
            You are a teacher conducting an oral assessment. Your task is to generate open-ended and thought-provoking questions
            that ask for the student's opinion or perspective on a specific topic. The questions should encourage the student
            to think critically and provide detailed responses. Ensure each question ends with "Why or why not?" as part of the structure.
            
            Example questions:
            - Does making a living as a street artist appeal to you? Why or why not?
            - Do you think social media benefits us? Why or why not?
            - Are the cultures of yesteryear being lost in today's fast-paced society? Why or why not?
            
            Generate a question related to the following topic: ${description}.
          `
        }
      ],
      model: "gpt-4o-mini",
      temperature: 0.3, // Lower temperature for more focused responses
    });
    
    // Get the generated question from the AI's response
    let generatedQuestion = chatCompletion.choices[0].message.content.trim();

    // Ensure the question ends with "Why or why not?" by appending it if necessary
    if (!generatedQuestion.endsWith('Why or why not?')) {
      generatedQuestion += ' Why or why not?';
    }

    // Insert the generated question into the database
    await pool.query(
      'INSERT INTO questions (topic_id, question, username) VALUES ($1, $2, $3)',
      [topicId, generatedQuestion, username]
    );

  } catch (err) {
    console.error("Error generating questions:", err.message);
    throw err;
  }
};



app.post('/generate_questions', async (req, res) => {
  const { description, topicId, username } = req.body; 

  try {
    // Remove the check for existing questions
    // Generate new questions regardless of whether previous ones exist
    await generateQuestions(description, topicId, username);

    // Fetch the newly generated questions
    const newQuestions = await pool.query('SELECT * FROM questions WHERE topic_id = $1 AND username = $2', [topicId, username]);

    res.status(200).json({ message: 'New questions generated successfully', questions: newQuestions.rows });
  } catch (err) {
    console.error('Error generating questions:', err.message);
    res.status(500).send('Server error');
  }
});



// Update an existing question for a specific topic and user
app.put('/questions/:id', async (req, res) => {
  const { id } = req.params; // Question ID
  const { topicId, username, newQuestion } = req.body; // New question content, topic ID, and username

  try {
    // Check if the question exists for the given topic, user, and question ID
    const existingQuestion = await pool.query(
      'SELECT * FROM questions WHERE id = $1 AND topic_id = $2 AND username = $3',
      [id, topicId, username]
    );

    if (existingQuestion.rows.length === 0) {
      return res.status(404).json({ message: 'Question not found for the specified topic and user' });
    }

    // Update the question in the database
    await pool.query(
      'UPDATE questions SET question = $1 WHERE id = $2 AND topic_id = $3 AND username = $4',
      [newQuestion, id, topicId, username]
    );

    res.json({ message: 'Question updated successfully' });
  } catch (err) {
    console.error('Error updating question:', err.message);
    res.status(500).send('Server error');
  }
});

// Get existing questions for a specific topic and user
app.get('/questions', async (req, res) => {
  const { topicId, username } = req.query; // Extract topicId and username from query parameters

  try {
    const questions = await pool.query(
      'SELECT * FROM questions WHERE topic_id = $1 AND username = $2',
      [topicId, username]
    );

    res.json(questions.rows);
  } catch (err) {
    console.error('Error fetching questions:', err.message);
    res.status(500).send('Server error');
  }
});
*/