
users,

CREATE TYPE user_role AS ENUM ('Student', 'Teacher', 'Admin');

CREATE TABLE users (
    id SERIAL PRIMARY KEY, 
    username VARCHAR(255) NOT NULL, 
    email VARCHAR(255) UNIQUE NOT NULL, 
    password VARCHAR(255) NOT NULL, 
    role user_role NOT NULL, 
    reset_token VARCHAR(255), 
    reset_token_expires BIGINT
);

topic,

CREATE TYPE topic_difficulty AS ENUM ('Easy', 'Intermediate', 'Hard');


CREATE TABLE topic (
    id SERIAL PRIMARY KEY,
    topicname VARCHAR(255) NOT NULL, 
    difficulty topic_difficulty NOT NULL,
    video_url VARCHAR(255), 
    datecreated TIMESTAMP DEFAULT NOW(),
    description TEXT,
    questions TEXT[] 
);

ALTER TABLE topic
ADD COLUMN classes TEXT[];

ALTER TABLE topic
Add COLUMN teacher_username VARCHAR(255);

assessment_sessions,

CREATE TABLE assessment_sessions (
  id SERIAL PRIMARY KEY,
  username VARCHAR(255) NOT NULL,
  topic_id INT NOT NULL,
  question TEXT NOT NULL,
  responses JSONB NOT NULL,
  datetime TIMESTAMP NOT NULL
);

ALTER TABLE assessment_sessions ADD COLUMN attempt_count INTEGER DEFAULT 0;

-- For assessment_sessions table
ALTER TABLE assessment_sessions
ADD COLUMN user_id INT,
ADD CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES users(id);


feedback,

CREATE TABLE feedback (
  id SERIAL PRIMARY KEY,
  username VARCHAR(255) NOT NULL,            -- Student's username
  teacher_username VARCHAR(255) NOT NULL,    -- Teacher's username
  topic_id INT NOT NULL,
  attempt_count INT NOT NULL,
  feedback_text TEXT NOT NULL
);

-- For feedback table
ALTER TABLE feedback
ADD COLUMN user_id INT,
ADD CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES users(id);

ALTER TABLE feedback ADD COLUMN grade VARCHAR(10);

ALTER TABLE feedback
ADD COLUMN class_id INTEGER;

UPDATE feedback
SET class_id = classes.id
FROM classes
WHERE feedback.teacher_username = classes.teacher_username
AND EXISTS (
    SELECT 1
    FROM jsonb_array_elements(classes.students::jsonb) AS student
    WHERE student->>'username' = feedback.username
);

rubrics,

CREATE TABLE rubrics (
  id SERIAL PRIMARY KEY,
  components JSONB,            -- JSON field to store components, descriptions, and grades
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

classes,

CREATE TABLE classes (
    id SERIAL PRIMARY KEY,
    class_name VARCHAR(100) NOT NULL,
    teacher_username VARCHAR(100) NOT NULL,
    students JSONB NOT NULL -- To store an array of student usernames and emails
);


CREATE TABLE announcements (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    class_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    date_posted TIMESTAMP NOT NULL
);

ALTER TABLE announcements
ALTER COLUMN date_posted SET DEFAULT NOW();

CREATE TABLE rubric (
    id SERIAL PRIMARY KEY,
    rubric_title VARCHAR(255) NOT NULL,
    grading_columns JSONB NOT NULL, 
    column_order TEXT[], 
    date_created TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE rubric_rows (
    id SERIAL PRIMARY KEY,
    rubric_id INT NOT NULL REFERENCES rubric(id) ON DELETE CASCADE,
    criteria VARCHAR(255) NOT NULL,
    weightage VARCHAR(10) NOT NULL,
    grading_values JSONB NOT NULL 
);